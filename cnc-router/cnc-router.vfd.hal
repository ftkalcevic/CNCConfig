# #######################################
#
# CNC Router, x, y slaves, z slaves, a
#
# ########################################


# ###################################
# Core EMC/HAL Loads
# ###################################

# kinematics
loadrt gantrykins coordinates=XYZAYZ

# motion controller, get name and thread periods from ini file
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[TRAJ]AXES

# standard components
loadrt pid num_chan=6 

# hostmot2 driver
loadrt hostmot2

# load low-level driver
loadrt [HOSTMOT2](DRIVER) config=[HOSTMOT2](CONFIG)

setp hm2_[HOSTMOT2](BOARD).0.pwmgen.pwm_frequency 40000

setp hm2_[HOSTMOT2](BOARD).0.watchdog.timeout_ns 10000000

loadrt limit1
loadrt scale
loadrt conv_float_s32


# vfd driver
#loadusr sj200_vfd --device /dev/ttyUSB0 --name vfd --rate 19200 --parity none --verbose --debug
loadusr sj200_vfd --device /dev/ttyUSB0 --name vfd --rate 19200 --parity none

# ################################################
# THREADS
# ################################################

addf hm2_[HOSTMOT2](BOARD).0.read          servo-thread

addf motion-command-handler                servo-thread
addf motion-controller                     servo-thread

addf pid.0.do-pid-calcs                    servo-thread
addf pid.1.do-pid-calcs                    servo-thread
addf pid.2.do-pid-calcs                    servo-thread
addf pid.3.do-pid-calcs                    servo-thread
addf pid.4.do-pid-calcs                    servo-thread
addf pid.5.do-pid-calcs                    servo-thread

addf hm2_[HOSTMOT2](BOARD).0.write         servo-thread
addf hm2_[HOSTMOT2](BOARD).0.pet_watchdog  servo-thread
       
addf limit1.0				   servo-thread
addf scale.0				   servo-thread
addf conv-float-s32.0			   servo-thread

# ######################################################
# Axis-of-motion Specific Configs (not the GUI)
# ######################################################


# ################
# X [0] Axis
# ################

# axis enable chain
newsig emcmot.00.enable bit
sets emcmot.00.enable FALSE
net emcmot.00.enable => pid.0.enable
net emcmot.00.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.05.enable
net emcmot.00.enable <= axis.0.amp-enable-out 

# encoder feedback
setp hm2_[HOSTMOT2](BOARD).0.encoder.05.counter-mode 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.05.filter 1
setp hm2_[HOSTMOT2](BOARD).0.encoder.05.index-invert 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.05.index-mask 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.05.index-mask-invert 0

setp  hm2_[HOSTMOT2](BOARD).0.encoder.05.scale  [AXIS_0]INPUT_SCALE
net motor.00.pos-fb hm2_[HOSTMOT2](BOARD).0.encoder.05.position => pid.0.feedback
net motor.00.pos-fb => axis.0.motor-pos-fb #push copy back to Axis GUI

# set PID loop gains from inifile
setp pid.0.Pgain [AXIS_0]P
setp pid.0.Igain [AXIS_0]I
setp pid.0.Dgain [AXIS_0]D
setp pid.0.bias [AXIS_0]BIAS
setp pid.0.FF0 [AXIS_0]FF0
setp pid.0.FF1 [AXIS_0]FF1
setp pid.0.FF2 [AXIS_0]FF2
setp pid.0.deadband [AXIS_0]DEADBAND
setp pid.0.maxoutput [AXIS_0]MAX_OUTPUT

# position command signals
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.05.output-type 1 #pwm on pin1, dir on pin2
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.05.scale  [AXIS_0]OUTPUT_SCALE

net emcmot.00.pos-cmd axis.0.motor-pos-cmd => pid.0.command
net motor.00.command  pid.0.output  =>  hm2_[HOSTMOT2](BOARD).0.pwmgen.05.value

# ################
# Y1 [1] Axis
# ################

# axis enable chain
newsig emcmot.01.enable bit
sets emcmot.01.enable FALSE
net emcmot.01.enable => pid.1.enable
net emcmot.01.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.00.enable
net emcmot.01.enable <= axis.1.amp-enable-out 

# encoder feedback
setp hm2_[HOSTMOT2](BOARD).0.encoder.00.counter-mode 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.00.filter 1
setp hm2_[HOSTMOT2](BOARD).0.encoder.00.index-invert 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.00.index-mask 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.00.index-mask-invert 0

setp  hm2_[HOSTMOT2](BOARD).0.encoder.00.scale  [AXIS_Y]INPUT_SCALE
net motor.01.pos-fb hm2_[HOSTMOT2](BOARD).0.encoder.00.position => pid.1.feedback
net motor.01.pos-fb => axis.1.motor-pos-fb #push copy back to Axis GUI

# set PID loop gains from inifile
setp pid.1.Pgain [AXIS_Y]P
setp pid.1.Igain [AXIS_Y]I
setp pid.1.Dgain [AXIS_Y]D
setp pid.1.bias [AXIS_Y]BIAS
setp pid.1.FF0 [AXIS_Y]FF0
setp pid.1.FF1 [AXIS_Y]FF1
setp pid.1.FF2 [AXIS_Y]FF2
setp pid.1.deadband [AXIS_Y]DEADBAND
setp pid.1.maxoutput [AXIS_Y]MAX_OUTPUT

# position command signals
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.00.output-type 1 #pwm on pin1, dir on pin2
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.00.scale [AXIS_Y]OUTPUT_SCALE

net emcmot.01.pos-cmd axis.1.motor-pos-cmd => pid.1.command
net motor.01.command  pid.1.output  =>  hm2_[HOSTMOT2](BOARD).0.pwmgen.00.value


# ################
# Z1 [2] Axis
# ################

# axis enable chain
newsig emcmot.02.enable bit
sets emcmot.02.enable FALSE
net emcmot.02.enable => pid.2.enable
net emcmot.02.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.07.enable
net emcmot.02.enable <= axis.2.amp-enable-out 

# encoder feedback
setp hm2_[HOSTMOT2](BOARD).0.encoder.07.counter-mode 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.07.filter 1
setp hm2_[HOSTMOT2](BOARD).0.encoder.07.index-invert 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.07.index-mask 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.07.index-mask-invert 0

setp  hm2_[HOSTMOT2](BOARD).0.encoder.07.scale  [AXIS_Z]INPUT_SCALE
net motor.02.pos-fb hm2_[HOSTMOT2](BOARD).0.encoder.07.position => pid.2.feedback
net motor.02.pos-fb => axis.2.motor-pos-fb #push copy back to Axis GUI

# set PID loop gains from inifile
setp pid.2.Pgain [AXIS_Z]P
setp pid.2.Igain [AXIS_Z]I
setp pid.2.Dgain [AXIS_Z]D
setp pid.2.bias [AXIS_Z]BIAS
setp pid.2.FF0 [AXIS_Z]FF0
setp pid.2.FF1 [AXIS_Z]FF1
setp pid.2.FF2 [AXIS_Z]FF2
setp pid.2.deadband [AXIS_Z]DEADBAND
setp pid.2.maxoutput [AXIS_Z]MAX_OUTPUT

# position command signals
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.07.output-type 1 #pwm on pin1, dir on pin2
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.07.scale [AXIS_Z]OUTPUT_SCALE

net emcmot.02.pos-cmd axis.2.motor-pos-cmd => pid.2.command
net motor.02.command  pid.2.output  =>  hm2_[HOSTMOT2](BOARD).0.pwmgen.07.value

# ################
# A [3] Axis
# ################

# axis enable chain
newsig emcmot.03.enable bit
sets emcmot.03.enable FALSE
net emcmot.03.enable => pid.3.enable
net emcmot.03.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.02.enable
net emcmot.03.enable <= axis.3.amp-enable-out 

# encoder feedback
setp hm2_[HOSTMOT2](BOARD).0.encoder.02.counter-mode 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.02.filter 1
setp hm2_[HOSTMOT2](BOARD).0.encoder.02.index-invert 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.02.index-mask 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.02.index-mask-invert 0

setp  hm2_[HOSTMOT2](BOARD).0.encoder.02.scale  [AXIS_3]INPUT_SCALE
net motor.03.pos-fb hm2_[HOSTMOT2](BOARD).0.encoder.02.position => pid.3.feedback
net motor.03.pos-fb => axis.3.motor-pos-fb #push copy back to Axis GUI

# set PID loop gains from inifile
setp pid.3.Pgain [AXIS_3]P
setp pid.3.Igain [AXIS_3]I
setp pid.3.Dgain [AXIS_3]D
setp pid.3.bias [AXIS_3]BIAS
setp pid.3.FF0 [AXIS_3]FF0
setp pid.3.FF1 [AXIS_3]FF1
setp pid.3.FF2 [AXIS_3]FF2
setp pid.3.deadband [AXIS_3]DEADBAND
setp pid.3.maxoutput [AXIS_3]MAX_OUTPUT

# position command signals
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.02.output-type 1 #pwm on pin1, dir on pin2
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.02.scale  [AXIS_3]OUTPUT_SCALE

net emcmot.03.pos-cmd axis.3.motor-pos-cmd => pid.3.command
net motor.03.command  pid.3.output  =>  hm2_[HOSTMOT2](BOARD).0.pwmgen.02.value

# ################
# Y2 [4] Axis
# ################

# axis enable chain
newsig emcmot.04.enable bit
sets emcmot.04.enable FALSE
net emcmot.04.enable => pid.4.enable
net emcmot.04.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.01.enable
net emcmot.04.enable <= axis.4.amp-enable-out 

# encoder feedback
setp hm2_[HOSTMOT2](BOARD).0.encoder.01.counter-mode 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.01.filter 1
setp hm2_[HOSTMOT2](BOARD).0.encoder.01.index-invert 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.01.index-mask 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.01.index-mask-invert 0

setp  hm2_[HOSTMOT2](BOARD).0.encoder.01.scale  [AXIS_Y]INPUT_SCALE
net motor.04.pos-fb hm2_[HOSTMOT2](BOARD).0.encoder.01.position => pid.4.feedback
net motor.04.pos-fb => axis.4.motor-pos-fb #push copy back to Axis GUI

# set PID loop gains from inifile
setp pid.4.Pgain [AXIS_Y]P
setp pid.4.Igain [AXIS_Y]I
setp pid.4.Dgain [AXIS_Y]D
setp pid.4.bias [AXIS_Y]BIAS
setp pid.4.FF0 [AXIS_Y]FF0
setp pid.4.FF1 [AXIS_Y]FF1
setp pid.4.FF2 [AXIS_Y]FF2
setp pid.4.deadband [AXIS_Y]DEADBAND
setp pid.4.maxoutput [AXIS_Y]MAX_OUTPUT

# position command signals
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.01.output-type 1 #pwm on pin1, dir on pin2
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.01.scale [AXIS_Y]OUTPUT_SCALE

net emcmot.04.pos-cmd axis.4.motor-pos-cmd => pid.4.command
net motor.04.command  pid.4.output  =>  hm2_[HOSTMOT2](BOARD).0.pwmgen.01.value




# ################
# Z2 [5] Axis
# ################

# axis enable chain
newsig emcmot.05.enable bit
sets emcmot.05.enable FALSE
net emcmot.05.enable => pid.5.enable
net emcmot.05.enable => hm2_[HOSTMOT2](BOARD).0.pwmgen.06.enable
net emcmot.05.enable <= axis.5.amp-enable-out 

# encoder feedback
setp hm2_[HOSTMOT2](BOARD).0.encoder.06.counter-mode 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.06.filter 1
setp hm2_[HOSTMOT2](BOARD).0.encoder.06.index-invert 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.06.index-mask 0
setp hm2_[HOSTMOT2](BOARD).0.encoder.06.index-mask-invert 0

setp  hm2_[HOSTMOT2](BOARD).0.encoder.06.scale  [AXIS_Z]INPUT_SCALE
net motor.05.pos-fb hm2_[HOSTMOT2](BOARD).0.encoder.06.position => pid.5.feedback
net motor.05.pos-fb => axis.5.motor-pos-fb #push copy back to Axis GUI

# set PID loop gains from inifile
setp pid.5.Pgain [AXIS_Z]P
setp pid.5.Igain [AXIS_Z]I
setp pid.5.Dgain [AXIS_Z]D
setp pid.5.bias [AXIS_Z]BIAS
setp pid.5.FF0 [AXIS_Z]FF0
setp pid.5.FF1 [AXIS_Z]FF1
setp pid.5.FF2 [AXIS_Z]FF2
setp pid.5.deadband [AXIS_Z]DEADBAND
setp pid.5.maxoutput [AXIS_Z]MAX_OUTPUT

# position command signals
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.06.output-type 1 #pwm on pin1, dir on pin2
setp hm2_[HOSTMOT2](BOARD).0.pwmgen.06.scale [AXIS_Z]OUTPUT_SCALE

net emcmot.05.pos-cmd axis.5.motor-pos-cmd => pid.5.command
net motor.05.command  pid.5.output  =>  hm2_[HOSTMOT2](BOARD).0.pwmgen.06.value


# ##################################################
# Standard I/O Block - EStop, Etc
# ##################################################

setp hm2_[HOSTMOT2](BOARD).0.gpio.048.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.049.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.050.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.051.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.052.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.053.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.054.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.055.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.056.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.057.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.058.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.059.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.060.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.061.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.062.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.063.is_output 0
setp hm2_[HOSTMOT2](BOARD).0.gpio.064.is_output 1
setp hm2_[HOSTMOT2](BOARD).0.gpio.064.invert_output 1
setp hm2_[HOSTMOT2](BOARD).0.gpio.065.is_output 1
setp hm2_[HOSTMOT2](BOARD).0.gpio.066.is_output 1
setp hm2_[HOSTMOT2](BOARD).0.gpio.067.is_output 1
setp hm2_[HOSTMOT2](BOARD).0.gpio.068.is_output 1
setp hm2_[HOSTMOT2](BOARD).0.gpio.069.is_output 1
setp hm2_[HOSTMOT2](BOARD).0.gpio.070.is_output 1
setp hm2_[HOSTMOT2](BOARD).0.gpio.071.is_output 1

# create a signal for the estop loopback
net estop-loop iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed

# at-speed
net motor-at-speed  hm2_[HOSTMOT2](BOARD).0.gpio.048.in => spindle.0.at-speed

# spindle-speed
setp limit1.0.min 0
setp limit1.0.max 24000
setp scale.0.gain 0.0166666666
setp scale.0.offset 0
net spindle-speed-cmd   spindle.0.speed-out => limit1.0.in
net spindle-limit       limit1.0.out => scale.0.in
net spindle-scale       scale.0.out => conv-float-s32.0.in
net spindle-cmd 	conv-float-s32.0.out => vfd.OutputFrequencyCommandW

# spindle enable
net spindle-fwd         spindle.0.forward => hm2_[HOSTMOT2](BOARD).0.gpio.064.out

# ##################################################
#
# homing
#
# ##################################################

# X
net home-switch-x <= hm2_[HOSTMOT2](BOARD).0.gpio.049.in_not
net home-switch-x => axis.0.home-sw-in
net x-index-enable <= axis.0.index-enable
net x-index-enable => hm2_[HOSTMOT2](BOARD).0.encoder.05.index-enable
net x-index-enable => pid.0.index-enable

# Y1
net home-switch-y1 <= hm2_[HOSTMOT2](BOARD).0.gpio.051.in_not
net home-switch-y1 => axis.1.home-sw-in

# Y2
net home-switch-y2 <= hm2_[HOSTMOT2](BOARD).0.gpio.053.in_not
net home-switch-y2 => axis.4.home-sw-in

# Z1
net home-switch-z1 <= hm2_[HOSTMOT2](BOARD).0.gpio.055.in_not
net home-switch-z1 => axis.2.home-sw-in
net z1-index-enable <= axis.2.index-enable
net z1-index-enable => hm2_[HOSTMOT2](BOARD).0.encoder.07.index-enable
net z1-index-enable => pid.2.index-enable

# Z2
net home-switch-z2 <= hm2_[HOSTMOT2](BOARD).0.gpio.057.in_not
net home-switch-z2 => axis.5.home-sw-in
net z2-index-enable <= axis.5.index-enable
net z2-index-enable => hm2_[HOSTMOT2](BOARD).0.encoder.06.index-enable
net z2-index-enable => pid.5.index-enable




