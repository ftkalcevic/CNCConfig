# #######################################
#
# HAL file for HostMot2 with 3 steppers
#
# Derived from Ted Hyde's original hm2-servo config
#
# Based up work and discussion with Seb & Peter & Jeff
# GNU license references - insert here. www.linuxcnc.org
#
#
# ########################################
# Firmware files are in /lib/firmware/hm2/7i43/
# Must symlink the hostmot2 firmware directory of sanbox to
# /lib/firmware before running EMC2...
# sudo ln -s $HOME/emc2-sandbox/src/hal/drivers/mesa-hostmot2/firmware /lib/firmware/hm2
#
# See also:
# <http://www.linuxcnc.org/docs/devel/html/man/man9/hostmot2.9.html#config%20modparam>
# and http://wiki.linuxcnc.org/cgi-bin/emcinfo.pl?HostMot2
#
# #####################################################################


# ###################################
# Core EMC/HAL Loads
# ###################################

# kinematics
loadrt [KINS]KINEMATICS

# motion controller, get name and thread periods from ini file
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS

# hostmot2 driver
loadrt hostmot2

# load low-level driver
loadrt [HOSTMOT2](DRIVER) config=[HOSTMOT2](CONFIG)

# load estop latch component
loadrt estop_latch

loadrt differential names=diffElbow,diffWrist

loadrt not count=3
# ################################################
# THREADS
# ################################################

addf hm2_[HOSTMOT2](BOARD).0.read         servo-thread
addf motion-command-handler               servo-thread
addf motion-controller                    servo-thread
# revel in the free time here from not having to run PID 
addf hm2_[HOSTMOT2](BOARD).0.write        servo-thread
addf estop-latch.0                        servo-thread
addf diffElbow                            servo-thread 
addf diffWrist                            servo-thread 
addf not.0 servo-thread
addf not.1 servo-thread
addf not.2 servo-thread

# ######################################################
# Axis-of-motion Specific Configs (not the GUI)
# ######################################################


# ################
# Base Joint [0]
# ################

# axis enable chain
newsig emcmot.00.enable bit
sets emcmot.00.enable FALSE

net emcmot.00.enable <= joint.0.amp-enable-out 
net emcmot.00.enable => hm2_[HOSTMOT2](BOARD).0.stepgen.03.enable


# position command and feedback
net emcmot.00.pos-cmd <= joint.0.motor-pos-cmd
net emcmot.00.pos-cmd => hm2_[HOSTMOT2](BOARD).0.stepgen.03.position-cmd

net motor.00.pos-fb <= hm2_[HOSTMOT2](BOARD).0.stepgen.03.position-fb
net motor.00.pos-fb => joint.0.motor-pos-fb


# timing parameters
setp hm2_[HOSTMOT2](BOARD).0.stepgen.03.dirsetup        [JOINT_0]DIRSETUP
setp hm2_[HOSTMOT2](BOARD).0.stepgen.03.dirhold         [JOINT_0]DIRHOLD

setp hm2_[HOSTMOT2](BOARD).0.stepgen.03.steplen         [JOINT_0]STEPLEN
setp hm2_[HOSTMOT2](BOARD).0.stepgen.03.stepspace       [JOINT_0]STEPSPACE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.03.position-scale  [JOINT_0]SCALE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.03.maxvel          [JOINT_0]STEPGEN_MAX_VEL
setp hm2_[HOSTMOT2](BOARD).0.stepgen.03.maxaccel        [JOINT_0]STEPGEN_MAX_ACC

setp hm2_[HOSTMOT2](BOARD).0.stepgen.03.step_type       0

# Limit switch
setp hm2_[HOSTMOT2](BOARD).0.gpio.068.is_opendrain 1
net limit.0 joint.0.home-sw-in <= hm2_[HOSTMOT2](BOARD).0.gpio.068.in_not

# ################
# Shoulder Joint [1]
# ################

# axis enable chain
newsig emcmot.01.enable bit
sets emcmot.01.enable FALSE

net emcmot.01.enable <= joint.1.amp-enable-out 
net emcmot.01.enable => hm2_[HOSTMOT2](BOARD).0.stepgen.00.enable


# position command and feedback
net emcmot.01.pos-cmd <= joint.1.motor-pos-cmd
net emcmot.01.pos-cmd => hm2_[HOSTMOT2](BOARD).0.stepgen.00.position-cmd

net motor.01.pos-fb <= hm2_[HOSTMOT2](BOARD).0.stepgen.00.position-fb
net motor.01.pos-fb => joint.1.motor-pos-fb


# timing parameters
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.dirsetup        [JOINT_1]DIRSETUP
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.dirhold         [JOINT_1]DIRHOLD

setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.steplen         [JOINT_1]STEPLEN
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.stepspace       [JOINT_1]STEPSPACE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.position-scale  [JOINT_1]SCALE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.maxvel          [JOINT_1]STEPGEN_MAX_VEL
setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.maxaccel        [JOINT_1]STEPGEN_MAX_ACC

setp hm2_[HOSTMOT2](BOARD).0.stepgen.00.step_type       0


# Limit switch
setp hm2_[HOSTMOT2](BOARD).0.gpio.050.is_opendrain 1
net limit.1 joint.1.home-sw-in <= hm2_[HOSTMOT2](BOARD).0.gpio.050.in_not


# ################
# elbow A Joint [2]
# This goes through the differential with joint 3 (see scorbot config)
# ################

# axis enable chain
newsig emcmot.02.enable bit
sets emcmot.02.enable FALSE

net emcmot.02.enable <= joint.2.amp-enable-out 
net emcmot.02.enable => hm2_[HOSTMOT2](BOARD).0.stepgen.01.enable


# position command and feedback
net elbow.pitch-cmd  joint.2.motor-pos-cmd => diffElbow.pitch-cmd
net elbow.pitch-fb   joint.2.motor-pos-fb <= diffElbow.pitch-fb 

net joint2.cmd diffElbow.motor0-cmd => hm2_[HOSTMOT2](BOARD).0.stepgen.01.position-cmd diffElbow.motor0-fb


# timing parameters
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.dirsetup        [JOINT_2]DIRSETUP
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.dirhold         [JOINT_2]DIRHOLD

setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.steplen         [JOINT_2]STEPLEN
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.stepspace       [JOINT_2]STEPSPACE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.position-scale  [JOINT_2]SCALE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.maxvel          [JOINT_2]STEPGEN_MAX_VEL
setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.maxaccel        [JOINT_2]STEPGEN_MAX_ACC

setp hm2_[HOSTMOT2](BOARD).0.stepgen.01.step_type       0

# Limit switch
setp hm2_[HOSTMOT2](BOARD).0.gpio.056.is_opendrain 1
net limit.2 joint.2.home-sw-in <= hm2_[HOSTMOT2](BOARD).0.gpio.056.in


# ################
# elbow b joint [3]
# This goes through the differential with joint 2 (see scorbot config)
# ################

# axis enable chain
newsig emcmot.03.enable bit
sets emcmot.03.enable FALSE

net emcmot.03.enable <= joint.3.amp-enable-out 
net emcmot.03.enable => hm2_[HOSTMOT2](BOARD).0.stepgen.02.enable


# position command and feedback
net elbow.roll-cmd  joint.3.motor-pos-cmd => diffElbow.roll-cmd
net elbow.roll-fb   joint.3.motor-pos-fb <= diffElbow.roll-fb 

net joint3.cmd diffElbow.motor1-cmd => hm2_[HOSTMOT2](BOARD).0.stepgen.02.position-cmd diffElbow.motor1-fb


# timing parameters
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.dirsetup        [JOINT_3]DIRSETUP
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.dirhold         [JOINT_3]DIRHOLD

setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.steplen         [JOINT_3]STEPLEN
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.stepspace       [JOINT_3]STEPSPACE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.position-scale  [JOINT_3]SCALE

setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.maxvel          [JOINT_3]STEPGEN_MAX_VEL
setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.maxaccel        [JOINT_3]STEPGEN_MAX_ACC

setp hm2_[HOSTMOT2](BOARD).0.stepgen.02.step_type       0


# Limit switch
setp hm2_[HOSTMOT2](BOARD).0.gpio.062.is_opendrain 1
net limit.3 joint.3.home-sw-in <= hm2_[HOSTMOT2](BOARD).0.gpio.062.in_not




#

# 
# The Mesa AnyIO output pins can be in open-drain mode (drive low, float
# high) or push/pull mode (drive low, drive high).
#
# When a logical output is 1 in open-drain mode, the FPGA lets the pin
# float and it gets pulled high to +5V via a 10K resistor.
#
# When a logical output is 1 in push/pull mode, the FPGA pushes the pin
# high but only to +3.3V.  This is problematic on some kinds of inputs.
#

#setp hm2_[HOSTMOT2](BOARD).0.gpio.048.is_opendrain 1
#setp hm2_[HOSTMOT2](BOARD).0.gpio.049.is_opendrain 1

#setp hm2_[HOSTMOT2](BOARD).0.gpio.054.is_opendrain 1
#setp hm2_[HOSTMOT2](BOARD).0.gpio.055.is_opendrain 1

#setp hm2_[HOSTMOT2](BOARD).0.gpio.060.is_opendrain 1
#setp hm2_[HOSTMOT2](BOARD).0.gpio.061.is_opendrain 1




# ##################################################
# Standard I/O Block - EStop, Etc
# ##################################################

# A basic estop loop that only includes the hostmot watchdog.
net user-enable iocontrol.0.user-request-enable => estop-latch.0.reset
net enable-latch estop-latch.0.ok-out => iocontrol.0.emc-enable-in
net watchdog hm2_[HOSTMOT2](BOARD).0.watchdog.has_bit => estop-latch.0.fault-in

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed


# dynamixel servos
loadusr -Wn dynamixelcomp /home/frankt/git/dynamixel/dynamixelcomp/dynamixelcomp baud=3000000 device=/dev/ttyUSB0 ids=2,3,4

loadrt gripper
addf gripper.0 servo-thread

loadrt pid num_chan=3 
addf pid.0.do-pid-calcs servo-thread
addf pid.1.do-pid-calcs servo-thread
addf pid.2.do-pid-calcs servo-thread

net joint4-enable joint.4.amp-enable-out => pid.0.enable dynamixelcomp.2.enable

# position command and feedback
net wrist.pitch-cmd  joint.4.motor-pos-cmd => diffWrist.pitch-cmd
net wrist.pitch-fb   joint.4.motor-pos-fb <= diffWrist.pitch-fb

net joint4.cmd diffWrist.motor1-cmd => pid.0.command 
net joint4-out pid.0.output => dynamixelcomp.2.velocity-cmd
net joint4 dynamixelcomp.2.position-fb => diffWrist.motor1-fb pid.0.feedback

net limit.4 joint.4.home-sw-in <= hm2_[HOSTMOT2](BOARD).0.gpio.071.in


setp dynamixelcomp.2.input-scale [JOINT_4]INPUT_SCALE
setp dynamixelcomp.2.output-scale [JOINT_4]OUTPUT_SCALE
setp dynamixelcomp.2.mode 1 # wheel mode
setp pid.0.maxoutput [JOINT_4]MAX_OUTPUT
setp pid.0.Pgain [JOINT_4]PGAIN
setp pid.0.Igain [JOINT_4]IGAIN
setp pid.0.Dgain [JOINT_4]DGAIN
setp pid.0.bias [JOINT_4]BIAS
setp pid.0.FF0 [JOINT_4]FF0
setp pid.0.FF1 [JOINT_4]FF1
setp pid.0.FF2 [JOINT_4]FF2
# deadband should be just over 1 count
setp pid.0.deadband [JOINT_4]DEADBAND


net joint5-enable joint.5.amp-enable-out => pid.1.enable dynamixelcomp.3.enable

# position command and feedback
setp diffWrist.roll-reverse 1
net wrist.roll-cmd  joint.5.motor-pos-cmd => diffWrist.roll-cmd
net wrist.roll-fb   joint.5.motor-pos-fb <= diffWrist.roll-fb

net joint5.cmd diffWrist.motor0-cmd => pid.1.command 
net joint5-out pid.1.output => dynamixelcomp.3.velocity-cmd
net joint5 dynamixelcomp.3.position-fb => diffWrist.motor0-fb pid.1.feedback

net limit.5 joint.5.home-sw-in <= hm2_[HOSTMOT2](BOARD).0.gpio.069.in_not

setp dynamixelcomp.3.input-scale [JOINT_5]INPUT_SCALE
setp dynamixelcomp.3.output-scale [JOINT_5]OUTPUT_SCALE
setp dynamixelcomp.3.mode 1 # wheel mode
setp pid.1.maxoutput [JOINT_5]MAX_OUTPUT
setp pid.1.Pgain [JOINT_5]PGAIN
setp pid.1.Igain [JOINT_5]IGAIN
setp pid.1.Dgain [JOINT_5]DGAIN
setp pid.1.bias [JOINT_5]BIAS
setp pid.1.FF0 [JOINT_5]FF0
setp pid.1.FF1 [JOINT_5]FF1
setp pid.1.FF2 [JOINT_5]FF2
# deadband should be just over 1 count
setp pid.1.deadband [JOINT_5]DEADBAND


# ################
# Gripper Joint[6]
# ################


net joint6-enable joint.6.amp-enable-out => pid.2.enable dynamixelcomp.4.enable

# position command and feedback
#net gripper-cmd  joint.6.motor-pos-cmd => pid.2.command 
#net joint6-out pid.2.output => dynamixelcomp.4.velocity-cmd
#net gripper-fb   joint.6.motor-pos-fb <= dynamixelcomp.4.position-fb pid.2.feedback


setp dynamixelcomp.4.input-scale [JOINT_6]INPUT_SCALE
setp dynamixelcomp.4.output-scale [JOINT_6]OUTPUT_SCALE
setp dynamixelcomp.4.mode 0 # position mode
setp dynamixelcomp.4.cw-limit 400
setp dynamixelcomp.4.ccw-limit 260
setp pid.2.maxoutput [JOINT_6]MAX_OUTPUT
setp pid.2.Pgain [JOINT_6]PGAIN
setp pid.2.Igain [JOINT_6]IGAIN
setp pid.2.Dgain [JOINT_6]DGAIN
setp pid.2.bias [JOINT_6]BIAS
setp pid.2.FF0 [JOINT_6]FF0
setp pid.2.FF1 [JOINT_6]FF1
setp pid.2.FF2 [JOINT_6]FF2
# deadband should be just over 1 count
setp pid.2.deadband [JOINT_6]DEADBAND

#pin in bit closed "closed = true, open = false";
#pin in bit tip "true = return tip offset, false = return palm offset";
#pin in float torque "grip force";

setp gripper.0.open-position-cmd 300
setp gripper.0.close-position-cmd 2300
setp gripper.0.open-offset 41.5
setp gripper.0.close-offset 48.25
setp gripper.0.palm-offset 0
setp gripper.0.move-speed  0.05

net gripper-position-cmd gripper.0.position-cmd => dynamixelcomp.4.position-cmd
net gripper-position-fb gripper.0.position-fb <= dynamixelcomp.4.raw-position-fb
net gripper-offset gripper.0.position-offset => ikfastkins.gripper-offset
net gripper-torque-out gripper.0.torque-out => dynamixelcomp.4.torque-limit

# Gripper object
#   open/closed
#   tip or palm
#   torque

net is-teleop-mode motion.teleop-mode => ikfastkins.teleop-mode
